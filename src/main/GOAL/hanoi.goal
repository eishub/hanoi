init module {
	knowledge {
		% Pin is empty
		empty(Pin) :- not(on(_, Pin, _)).
		% Disc on pin is top disc (nothing on top of it)
		topDisc(Disc, Pin, Size) :- on(Disc, Pin, _), disc(Disc, Size), not(on(_, Pin, Disc)).
	}
	beliefs {
		% Hanoi game has 3 pins (pin 0, pin 1, pin 2).
		pins(2). 
	}
	program {
		% handle initial percepts
		% disc(Name, Level): Name = Disc identifier; Level = Disc level / size.
		forall bel(percept(disc(Name, Size))) do insert(disc(Name, Size)).
		% on(Name, Position, Next): Name = Disc identifier; Position = Pin identifier;
		% Next = Identifier of the disc below the current one and is equal to 0 (zero)
		% in case the disc is the last one.
 		forall bel(percept(on(Name, Position, Next))) do insert(on(Name, Position, Next)). 
	}
	actionspec {
		% Action move(FromPin, ToPin) for moving discs: FromPin = Pin identifier; ToPin = Destination pin.
		% Bigger discs can't be piled upon smaller ones. If a move is impossible, nothing happens.
		move(FromPin, ToPin) {
			pre { topDisc(Disc, FromPin, Size), not( FromPin = ToPin ), ( empty(ToPin) ; (topDisc(ToDisc, ToPin, ToSize)), ToSize > Size) }
			post { true }
		}	
	}
}

main module {
	program {
		if bel(pins(P), random_between(0, P, FromPin), random_between(0, P, ToPin) ) then move(FromPin, ToPin).
	}
}

event module {
	program {
		% Update on(Name, Position, Next).
 		forall bel(percept(on(Name, Position, Next)), on(Name, OldPos, OldNext), not(OldPos=Position)) do
 			insert(on(Name, Position, Next)) + delete(on(Name, OldPos, OldNext)).
	}
}